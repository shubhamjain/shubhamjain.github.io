<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coffee Coder]]></title>
  <link href="http://coffeecoder.net/atom.xml" rel="self"/>
  <link href="http://coffeecoder.net/"/>
  <updated>2015-09-10T23:07:08+05:30</updated>
  <id>http://coffeecoder.net/</id>
  <author>
    <name><![CDATA[Shubham Jain]]></name>
    <email><![CDATA[shubham@coffeecoder.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging Stuck PHP-FPM Process With Strace]]></title>
    <link href="http://coffeecoder.net/blog/debugging-stuck-php-fpm-process-with-strace/"/>
    <updated>2015-09-10T22:57:21+05:30</updated>
    <id>http://coffeecoder.net/blog/debugging-stuck-php-fpm-process-with-strace</id>
    <content type="html"><![CDATA[<p>For most of the times, debugging is easy &ndash; a silly logical error or an oversight, quick to correct and move on but some problems are hard &ndash; because you don&rsquo;t know where it is wrong. The bigger the involved stack is, the higher are your chances of getting stuck at them. In such cases, tools like strace can be of great aid as they can help you give a hint about where things are getting screwed up.</p>

<p>Recently, I faced an issue at my company where navigating beyond the dashboard page resulted in navigation getting stuck.</p>

<h2>The Problem</h2>

<p>First a bit about our development environment &ndash; we use Vagrant to have a complete isolated environment which is similar to what we use in production. To provision our VM we use Puppet configuration management (although, we have been poor to keep it up to date with incorporation of newer technologies).</p>

<p>Now, we started facing a problem in which the PHP-FPM process just get hung and won&rsquo;t process any other request for a long time. It would do load after a while, having the same problem when navigating to another page. &ldquo;Annoying&rdquo; would be an understatement to describe how expasperating this problem was.</p>

<p>The only solution was to run <code>sudo service php5-fpm restart</code> inside the VM everytime it happened (resulting in <code>503 Bad Gateway</code>) and refresh the page again. Certainly, not a worthwhile solution but short of solutions, we aliased the command to have a quick fix.</p>

<p>Since the bug was not reproducible in production environment, our first suspect was vagrant or the local configuration of FPM. I tried, without success, to tweak some buffers and other settings of FPM and nginx but the problem was still persistent.</p>

<h2>strace to the rescue</h2>

<p><a href="http://linux.die.net/man/1/strace">strace</a> is a little linux utility whose most commong use case is to  prints a list of system calls made by the program. strace is an amazing tool for system admins that can aid in debugging in many cases, like diagnosing a problem of a running program which we will do in this case.</p>

<p>PHP-FPM uses master-slave model where the master process uses the workers to process the incoming requests. Since the actual processing of request can take place in any of the worker processes, we are going to use <code>pidof</code> command in combination with strace (<a href="edoceo.com/exemplar/strace-multiple-processes">source</a>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strace -f $(pidof php5-fpm | sed 's/\([0-9]*\)/\-p \1/g')</span></code></pre></td></tr></table></div></figure>


<p>After running the command and reproducing the problem, I noticed some peculiar timeouts in poll system calls. Let&rsquo;s cut out the noise from output and just trace those calls instead.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strace -f $(pidof php5-fpm | sed 's/\([0-9]*\)/\-p \1/g') -epoll</span></code></pre></td></tr></table></div></figure>


<p>This gives the following output,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[pid  2443] poll([{fd=10, events=POLLOUT|POLLWRNORM}], 1, 0) = 0 (Timeout)
</span><span class='line'>[pid  2443] poll([{fd=10, events=POLLOUT|POLLWRNORM}], 1, 0) = 0 (Timeout)
</span><span class='line'>[pid  2443] poll([{fd=10, events=POLLOUT|POLLWRNORM}], 1, 0) = 0 (Timeout)
</span><span class='line'>[pid  2443] poll([{fd=10, events=POLLOUT|POLLWRNORM}], 1, 0) = 0 (Timeout)
</span><span class='line'>[pid  2443] poll([{fd=10, events=POLLOUT|POLLWRNORM}], 1, 0) = 0 (Timeout)
</span><span class='line'>[pid  2443] poll([{fd=10, events=POLLOUT|POLLWRNORM}], 1, 0) = 0 (Timeout)
</span><span class='line'>[pid  2443] poll([{fd=10, events=POLLOUT|POLLWRNORM}], 1, 0) = 0 (Timeout)</span></code></pre></td></tr></table></div></figure>


<p>This can possible be the issue but what does <code>fd 10</code> refer to in this? Let&rsquo;s run <code>lsof</code> to know about it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lsof -p 2443</span></code></pre></td></tr></table></div></figure>


<p>This will give us list of all files opened by the process (including the sockets):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php5-fpm 4373 www-data    0u  IPv4              16196      0t0     TCP localhost:9000 (LISTEN)
</span><span class='line'>php5-fpm 4373 www-data    1u   CHR                1,3      0t0    5788 /dev/null
</span><span class='line'>php5-fpm 4373 www-data    2u   CHR                1,3      0t0    5788 /dev/null
</span><span class='line'>php5-fpm 4373 www-data    3ur  REG              252,0        0 4587530 /tmp/.ZendSem.LfeVSH (deleted)
</span><span class='line'>php5-fpm 4373 www-data    4u  IPv4              55738      0t0     TCP localhost:9000-&gt;localhost:50475 (ESTABLISHED)
</span><span class='line'>php5-fpm 4373 www-data    5uW  REG              252,0     2534 3805440 /var/lib/php5/sessions/sess_tmh0njqp2aid0jcfacsujdls75
</span><span class='line'>php5-fpm 4373 www-data    6u  0000                0,9        0    5763 anon_inode
</span><span class='line'>php5-fpm 4373 www-data    7u  unix 0xffff88007a2e1a00      0t0   55715 socket
</span><span class='line'>php5-fpm 4373 www-data    8u  unix 0xffff88007a2e3740      0t0   55716 socket
</span><span class='line'>php5-fpm 4373 www-data    9u  IPv4              55719      0t0     TCP localhost:49941-&gt;localhost:11210 (ESTABLISHED)
</span><span class='line'>php5-fpm 4373 www-data   10u  IPv4              55823      0t0     TCP 10.0.2.15:49535-&gt;10.0.0.135:9200 (SYN_SENT)</span></code></pre></td></tr></table></div></figure>


<p>The last entry with <code>fd 10</code> is what is of our interest. So the problem seems to be related to socket connection to <code>10.0.0.135</code>.</p>

<h2>Diagnosis</h2>

<p>We had started using Elastic Search a while ago in our application and chose to have centralized local server for the development environment. The ES server powered our reporting. After a while, the majority of our work was being done on the other side of our app, so we lost focus over the reporting part. After certain while, we forgot about our local server and stopped using it altogether since we weren&rsquo;t really working with it.</p>

<p>Whenever the dasboard opened, an ajax request used to query ES Sever using the <a href="https://github.com/elastic/elasticsearch-php/">ElasticSearch PHP</a> library. The problem as it happens was, this resulted in PHP5-FPM continously polling the ES Server to get a reply. Empirically, she worker process got hung in this loop, and it failed to respond to any other request unless it was restarted.</p>

<p>Is it a bug? Well, I am not sure but I will try to dig more into it.</p>

<h2>Lesson</h2>

<p>Our valuable lesson in this ordeal was that the local environment needs to be an absolute replica of one being used in production and setup of your work environment must be completely automated using up-to-date scripts. A common mistake is to just rely on vaguely documented commands which pose of chance of missing something in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Little Things]]></title>
    <link href="http://coffeecoder.net/blog/blog-little-things/"/>
    <updated>2015-07-20T14:57:25+05:30</updated>
    <id>http://coffeecoder.net/blog/blog-little-things</id>
    <content type="html"><![CDATA[<p>John Carmack once speculated that StackOverflow might have added billions in productivity.</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/chx">@chx</a> <a href="https://twitter.com/jzy">@jzy</a> <a href="https://twitter.com/StackExchange">@StackExchange</a> <a href="https://twitter.com/codinghorror">@codinghorror</a> SO has probably added billions of dollars of value to the world in increased programmer productivity.</p>&mdash; John Carmack (@ID_AA_Carmack) <a href="https://twitter.com/ID_AA_Carmack/status/380018564792455168">September 17, 2013</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Quite rightly so. Imagine, the no of people that didn&rsquo;t have to go through (maybe lousy) documentation, and long threads to seek solution for their problems. <abbr title="Read The Fucking Manual">RTFM</abbr>, many of programmers would be quick to point out but even the simplest questions, like, &ldquo;<em>How to read a whole file in python?</em>&rdquo;, &ldquo;<em>How to kill a process with its name?</em>&rdquo; must have saved thousands of programmers&#8217; time. Thanks to rookies who didn&rsquo;t feel embarrassed in asking them, that even experienced programmers can enjoy fruits of their answers.</p>

<!-- more -->


<p>Talking of embarrassment, I want to talk about the kinky feeling that many of us might have felt, when they had something to write about. There are many challenges we face in our day-job but things that go into write-ups are so feeble. The reason? If you are like me, that is because, we have a high regard of something that we should write about &ndash; has to be significant, and detailed. Additionally, reading posts of other programmers, amplifies the fear of posting something of little value. Small problems? Who cares? Everyone &ldquo;must be able&rdquo; to solve them eventually, completely disregarding how those &ldquo;insignificant&rdquo; write-ups were the ones that aided them in doing so.</p>

<p>I am quite impressed by <a href="http://davidwalsh.name/">David Walsh</a>&rsquo;s blog in this regard. Although, David is an amazing programmer who writes awesome posts, he doesn&rsquo;t go through such a detailed thought process when he has to write something. He often writes nifty tricks and How-To posts that have helped me countless no of times and yet, there are still very few blogs that might be doing the same thing.</p>

<p>There are lots of things that can be blogged about and yet, we are stuck in the dilemma of, &ndash; &ldquo;Is it worth something to write?&rdquo;. The fear of being insignificant aka &ldquo;Nobody will read it&rdquo; syndrome, inhibits us from writing that simple  thing that might have helped many people.</p>

<p>Although, it is something, that even I am trying to motivate myself to do but don&rsquo;t fear to <strong>blog little things</strong>. It doesn&rsquo;t need to be big, significant, detailed, mind-blowing to come out but just of a little value. It is helpful to think just of one person who had the exact same problem as yours and was helped by your post. Maybe the post won&rsquo;t get thousands of shares as we see in our reading list but hey, it saved someone&rsquo;s time :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Productivity Tricks Don't Matter]]></title>
    <link href="http://coffeecoder.net/blog/why-the-x-productivity-trick-doesnt-matter/"/>
    <updated>2015-06-28T21:12:20+05:30</updated>
    <id>http://coffeecoder.net/blog/why-the-x-productivity-trick-doesnt-matter</id>
    <content type="html"><![CDATA[<p>We&rsquo;re living in an exciting century. The majority of today&rsquo;s success stories trace its existence from few nerds hacking in their garage. Yet, majority of ambitious hackers, struggle to get going with any of the dozen of ideas that they have thought, most of which end up being un-fiddled in their favorite note-taking apps.</p>

<p>It seems very exciting to draw the plan for your side-project, its features, its technology and of course, how it could be a million-dollar thing but rarer is for someone to get started, and more rarer, to manage more than a few sittings on desk over it, eventually after, the enthusiasm dries up and its time to head back to browsing your favorite sites.</p>

<p>Almost everyone, knowingly or unknowingly, suffers from the same compulsion of doing activities that come under umbrella of &ldquo;wasting time&rdquo; but the scope is a lot different for hackers who don&rsquo;t procrastinate over not doing their assignments, or presentation but shipping something that people <em>might</em> need.</p>

<h2>What is procrastination?</h2>

<p>Wikipedia defines Procrastination as:</p>

<blockquote><p>a practice of carrying out less urgent tasks in preference to more urgent ones, or doing more pleasurable things in place of less pleasurable ones, and thus putting off impending tasks to a later time, sometimes to the &ldquo;last minute&rdquo; before a deadline.</p></blockquote>

<p>The task which can be getting a hair-cut, writing an academic paper, or coding the first version of the application. Paul Graham, in <a href="http://www.paulgraham.com/procrastination.html">one of his</a> essays argues that procrastinating over the first isn&rsquo;t necessarily bad if it serves a better purpose but the most common way people procrastinate is either by endlessly browsing social media sites, watching netflix, playing video games or any similar activity which echoes the sentiment of &ldquo;doing nothing&rdquo;. In short, procrastination is &ldquo;wasting time&rdquo; which could otherwise, be spent in a more productive manner.</p>

<!-- more -->


<h2>Productivity Tricks</h2>

<p> Numerous tricks and processes have been conceived to help people battle procrastination, like, Jerry Seinfield&rsquo;s <a href="http://www.writersstore.com/dont-break-the-chain-jerry-seinfeld">Don&rsquo;t Break The Chain</a>, <a href="http://www.lifehack.org/articles/productivity/the-pomodoro-technique-is-it-right-for-you.html">Pomodoro Technique</a> and Cal Newport&rsquo;s <a href="http://calnewport.com/blog/2013/12/21/deep-habits-the-importance-of-planning-every-minute-of-your-work-day/">Planning every minute</a>. Being a chronic procrastinator, I tried each one. For a few days, I was pushing myself to get tasks done, eventually falling into the same pattern and gradually, snubbing the whole process. It is quite obvious that, procrastination is not just a simple problem with coherent solutions.</p>

<p> The most common prognosis of procrastination, &ldquo;lack of discipline&rdquo;, is what most productivity tricks aim to tackle. They act as psychological signifiers, that you need to get something done today. When you start incorporating, Don&rsquo;t Break The Chain, in truest sense, the objective of the &ldquo;red X marks&rdquo; is to remind you everyday that you need to get something done before the day runs its course.</p>

<p> Ever remember those assignments which you couldn&rsquo;t focus on no matter how hard you tried? &ldquo;Soul crushing tasks&rdquo; are a perfect recipe for &ldquo;breaking your chain&rdquo; and getting de-motivated which is why I feel, these processes skip over two more important aspects of staying productive &ndash; choosing the task and staying motivated.</p>

<p>It doesn&rsquo;t matter weather you use an hourglass, a calendar or a minute-to-minute breakdown of your task to get things done. In my opinion, you can be productive, if you incorporate three habits in your daily lifestyle.</p>

<h2>Discipline, Choice and Motivation</h2>

<h3>Discipline</h3>

<blockquote><p>A zero day is when you don&rsquo;t do a single fucking thing towards whatever dream or goal or want or whatever that you got going on. No more zeros. I&rsquo;m not saying you gotta bust an essay out everyday, that&rsquo;s not the point. The point I&rsquo;m trying to make is that you have to make yourself, promise yourself, that the new SYSTEM you live in is a NON-ZERO system. Didnt&#8217; (sic) do anything all fucking day and it&rsquo;s 11:58 PM? Write one sentence. One pushup. Read one page of that chapter. One. Because one is non zero.
&mdash; <a href="https://www.reddit.com/r/getdisciplined/comments/1q96b5/i_just_dont_care_about_myself/cdah4af">No Zero days</a> by <a href="https://www.reddit.com/user/ryans01">/u/ryans01</a></p></blockquote>

<p>Taking the first step matters because only the first step can encourage you to take another. &ldquo;I don&rsquo;t feel like doing anything&rdquo; &ndash; is the most common excuse for people to procrastinate because getting started is the hardest thing people battle with everyday. It hard to open your text editor to crank new lines of code or open the draft of unfinished post to write more because it is (seemingly) too much work but as it happens, contrary to former feeling, there is a joy in getting started and finally start doing something.</p>

<p>I used to be daunted by people&rsquo;s commitment to write thousand words, committing code, everyday but looking closely, it seems after a certain point, the commitment is no more a discipline but a habit. The way people can help themselves is to stop looking for motivation to get started, instead, get started to gain motivation. Discipline matters! because it gets you started.</p>

<h3>Choice</h3>

<p>Can you force yourself to do something that you don&rsquo;t like? Probably, but in the longer run, it is a recipe for a burnout. All evidence suggests that people rarely succeed at things that they don&rsquo;t enjoy. One of the worst mistakes I made, was to force myself to do boring tasks which were hard to not to procrastinate over. All ideas seem exiting at first but many of them start to sound frivolous / impossible later, even to ourselves. At this stage, shipping the thing becomes impossible and you are back to square one.</p>

<p>So what should one work on?</p>

<ul>
<li><p>Something that isn&rsquo;t immense &ndash; Doing something challenging is one thing, trying something impossible is another. Attempting to build something immense, probably would land in stage where the idea of building itself would start sounding stupid which, quite surely, discourage you to continue. There is a reason why people say &ndash;  Ship and then iterate. If you ship X, people will tell that they need Y but if you ship W-X-Z there is good chance people don&rsquo;t find much use for W-Z but still miss Y.</p></li>
<li><p>Something that is exciting &ndash; It doesn&rsquo;t matter if it is a screensaver, a simple photographic effect or an elementary game, if you get excited about something, start building it. Rule of thumb &ndash; If you started building it without any rewards in mind, your work won&rsquo;t end up in vain; something which has been accurately described in  <a href="https://www.physics.ohio-state.edu/~kilcup/262/feynman.html">an excerpt</a> from <em>Surely you&rsquo;re joking, Mr. Feynman</em>.</p></li>
</ul>


<h3>Motivation</h3>

<p>Staying motivated is the key to get more done and having finishing something, the best way is to show it to the world. Don&rsquo;t bother if it is stupid, frivolous, invaluable, embarrassing or tiny.  Show it to the world, get feedback, see how people take it. Response won&rsquo;t always be encouraging but showing makes you more confident about your work and who knows that what you did might be exceptionally well-received by people?</p>

<p>Another way to stay motivated while you are in progress is to gamify it. Are you writing something? Plot the words you write daily and see how you are progressing. Github streak is also a great example of this where are you can see how active you are on your code contributions.</p>

<p>In short, you maintain your motivated-self by taking pride in your work and showing it to the world. Frankly, it won&rsquo;t be encouraging always but maintaining a habit of always-be-shipping ought to give you some results &ndash; some of which that will be really amazing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Side-scroller Game in HTML5 and Javascript]]></title>
    <link href="http://coffeecoder.net/blog/creating-side-scroller-game-in-html5/"/>
    <updated>2015-04-20T23:44:45+05:30</updated>
    <id>http://coffeecoder.net/blog/creating-side-scroller-game-in-html5</id>
    <content type="html"><![CDATA[<p>Recently I completed my first game, <a href="http://coffeecoder.net/penguin-walk">Penguin Walk</a>, with help of free art in Javascript and it gave me empirical experience of a known-fact surrounding game development &ndash; &ldquo;The hardest thing about developing a game is finishing it.&rdquo;</p>

<p>Although, the game is dead simple and code runs in only few hundreds of lines, it took a lot of effort to finish it. The reason? I believe the hard thing related to game development, is that you are attempting to build something complex out of very simple elements (pixels). The same reason why building a programming language is hard &ndash; you are trying to ensure that a stream of characters obeys formal grammatical rules and convert them into something that can execute. In this post, I will describe how I created my side-scroller game.</p>

<h2>Is Game Programming hard?</h2>

<p>Think about it. What does it take to project a bird from a slingshot, show it flying in projectile motion, hitting a set of object which are then animated to move accurately, in accordance to laws of physics? Well, a lot. You can only tell computer what to paint on the screen, rest of all the higher level abstractions, you build on your own.</p>

<p>Although, using a library might help a lot; after all, who can be expected to complete a desktop application if he has to program all controls on his own but if you compare the two, there are two complications that arise in game development &ndash;</p>

<!-- more -->


<ul>
<li>It is impossible to define a generic component that can work everywhere. At best, you can have some abstractions &ndash; sprites, and animations to help you make them on your own.</li>
<li>The interaction between objects in a game are far more complicated than in normal applications.</li>
</ul>


<p>I believe, programming a game, involves thinking at multiple levels of abstractions, which makes it challenging (and fun!).</p>

<h2>Getting the art</h2>

<p>&ldquo;Only! only if I could do art, I would start shipping games.&rdquo; &mdash; A recurring thought that must have went through many programmers&#8217; head and to some extent it might be true. Getting art done, isn&rsquo;t a piece of cake but guess what, you need not to. Plenty of free and non-free resources are available to help you get started.</p>

<p>Although, it might not give you a highly polished look you fancy but if you get a decent prototype, it is easy to iterate with professional help to take a step further. So don&rsquo;t whine about your non-artistic background, start working with available art and focus on the gameplay. I used free art from <a href="http://hasgraphics.com/">HasGraphics</a> and <a href="http://opengameart.org/">OpenGameArt</a> and free sounds effects from <a href="http://soundbible.com/">Soundbible</a>.</p>

<h1>Building the game</h1>

<h2>Animating using viewport and a larger window</h2>

<p>The first step in making our side-scroller would be to working out the animation part. You are given number of objects, how would you animate them? One obvious choice would be to work out the position, the visible part of each object in every frame and paint them on the canvas. Another approach, which I used, is to have a longer canvas and a moving viewport that shows only the part of the former and keep updating it with newer object. We refer the longer canvas as &ldquo;scene generator&rdquo;.</p>

<p>The <code>init()</code> function constructs two canvas objects, one a bigger window, another a viewport which is a sliced-off view of the bigger window. The latter is just meant for processing and hence isn&rsquo;t appended in the document.</p>

<h2>Loading Resources</h2>

<p>To ensure that all our resources are available when rendering, we must make sure they are loaded successfully before we initialize our game. Since, resource loading is asynchronous, we must take help of callbacks to trigger something when all resources have been loaded. <code>loadResources()</code> function monitors the number of objects that have been loaded successfully, compares them to those which are required to load and fires the callback (<code>init</code>) when the process is finished.</p>

<h2>Using sprites</h2>

<p>Canvas&#8217; drawImage function allows you to paint an image (or part of it) on canvas. Using drawImage we can use a larger sprite image and define what objects are where in sprite. <code>Sprite</code> object defines methods to paint the objects on canvas. The <code>init()</code> function initializes the <code>Sprite</code> with the definition of objects (X, Y, Width, Height) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sprites</span><span class="p">.</span><span class="nx">addObjects</span><span class="p">({</span>
</span><span class='line'>  <span class="s2">&quot;gground&quot;</span><span class="o">:</span> <span class="p">[</span><span class="mi">36</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;sground&quot;</span><span class="o">:</span> <span class="p">[</span><span class="mi">36</span><span class="p">,</span> <span class="mi">171</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;gstone&quot;</span><span class="o">:</span> <span class="p">[</span><span class="mi">36</span><span class="p">,</span> <span class="mi">281</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;sstone&quot;</span><span class="o">:</span> <span class="p">[</span><span class="mi">36</span><span class="p">,</span> <span class="mi">409</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;background&quot;</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The initialized class is used to create a Scene object where Sprite methods are called to paint on the scene generator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Scene</span><span class="p">(</span><span class="nx">sceneGenContext</span><span class="p">,</span> <span class="nx">sprites</span><span class="p">,</span> <span class="p">[</span><span class="nx">imgObj</span><span class="p">.</span><span class="nx">Cloud</span><span class="p">,</span> <span class="nx">sfxSounds</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a scene</h2>

<p>Now we know how to create sprites, the next step is to paint a scene using them. Recall that, we are using &ldquo;moving viewport&rdquo; approach, so, all our painting would happen on the scene generator whose length is twice that of viewport. There are four basic objects in our game &ndash; the background, clouds, lands and the animated penguin. The first three form part of our scene while the animated penguin is painted after the rendering the scene. The <code>paintClouds()</code>, <code>paintBackground()</code> methods are self-explanatory. The <code>drawLand()</code> function paints the land of given unit height, by first series painting &ldquo;soil&rdquo; objects then painting &ldquo;ground&rdquo; object for their top. Each land&rsquo;s data is stored in <code>landPoints</code> array so that we can check out penguin is going the right way.</p>

<p>The <code>drawLands()</code> function creates three land objects, each of length two. However, with these a little bit of canvas is left out, which we draw as a partial object, i.e, of length less than two. So we now have our basic scene, which looks like this,</p>

<p><img src="http://coffeecoder.net/images/penguin_walk/full_window.png"></p>

<h2>Animating the scene</h2>

<p>As we already discussed, we would be using &ldquo;moving viewport&rdquo; approach to have an animating scene. To do this, we have &ldquo;curX&rdquo; variable in Scene object which dictates the portion of the scene generator to be painted on the viewport which is basically <code>[curX, curX + viewport.width]</code>. The actual painting of the Scene on the viewport is done by <code>showScene()</code> in the Game object with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">realContext</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">scene</span><span class="p">.</span><span class="nx">sceneGenContext</span><span class="p">.</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">scene</span><span class="p">.</span><span class="nx">curX</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_HEIGHT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_HEIGHT</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>At every frame, <code>curX</code> changes and different portion gets painted on viewport. Additionally, <code>updateLandPoints()</code> checks if the current land hasn&rsquo;t gone out of focus with <code>(this.landPoints[0].posX + this.landPoints[0].width - this.curX) &lt; 30</code>, in which case, the first landPoint is removed from the array and the new focus land is repainted as ground one. After <code>curx</code> becomes larger then viewport&rsquo;s width, the first half of larger window gets spliced to the first half and second half is regenerated. Something which happens in <code>generateScene()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">generateScene</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Splice second half to first</span>
</span><span class='line'>  <span class="nx">sceneGenContext</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">sceneGenContext</span><span class="p">.</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_HEIGHT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">,</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_HEIGHT</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">spriteObj</span><span class="p">.</span><span class="nx">paintBackground</span><span class="p">(</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Assign new positions to spliced lands</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="s2">&quot;undefined&quot;</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">posX</span> <span class="o">-=</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Regenerate scene.</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">paintClouds</span><span class="p">(</span><span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">drawLands</span><span class="p">(</span><span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">curX</span> <span class="o">-=</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">CANVAS_WIDTH</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So out animation logic in a nutshell is, keep updating viewport with new coordinates over the larger window and when it is about to finish, recreate the larger window. The penguin is animated over the viewport by painting a new frame of penguin&rsquo;s animation every time <code>penguin.paintFrame</code> is called.</p>

<h2>The Game</h2>

<p>Now finally, we arrive at building our game logic. So what does our game have? Change land height on &ldquo;Up&rdquo; / &ldquo;Down&rdquo; key press, check if penguin is walking on levelled land, and trigger game over it isn&rsquo;t.</p>

<h4>Changing Land Height</h4>

<p>When a key is pressed, it triggers <code>keyHit()</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">keyHit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">keyCode</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="nx">keyCode</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">ACTION_MAP</span><span class="p">.</span><span class="nx">LAND_UP</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">gameBegun</span> <span class="p">)</span> <span class="nx">scene</span><span class="p">.</span><span class="nx">updateHeightLand</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">ACTION_MAP</span><span class="p">.</span><span class="nx">LAND_DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">gameBegun</span> <span class="p">)</span> <span class="nx">scene</span><span class="p">.</span><span class="nx">updateHeightLand</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="nx">CONFIG</span><span class="p">.</span><span class="nx">ACTION_MAP</span><span class="p">.</span><span class="nx">GAME_START</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">beginGame</span><span class="p">();</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>When <code>LAND_UP</code> and <code>LAND_DOWN</code> keys, call <code>updateLandHeight()</code> which repaints lands to a newer height. I faced a problem while building this. Earlier I directly used to modify <code>landHeight</code> without storing original generated height. Since the logic is to modify height of all lands on the same level, it used to modify lands which were not originally, on the same level. For eg, lets say height of generated lands are &ndash; <code>1, 1, 2, 3</code>. After pressing &ldquo;Up&rdquo;, the new heights are &ldquo;2, 2, 2, 3&rdquo;. Without storing original height, the logic would also modify the height of the third one. The solution was to store original height separately, i.e, use <code>origHeight</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span>  <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span> <span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">oldOrigHeight</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">origHeight</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="nx">inc</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">landHeight</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="p">)</span>
</span><span class='line'>      <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">landHeight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">inc</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">landHeight</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>      <span class="o">--</span><span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">landHeight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">clearLand</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">posX</span><span class="p">,</span> <span class="nx">oldHeight</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">landLength</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">drawLand</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">landHeight</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">landLength</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">landPoints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">posX</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="s2">&quot;ground&quot;</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The use of <code>clearLand()</code> is simply to clear out part of land when its height is decremented.</p>

<h4>Checking Game Over</h4>

<p>The <code>checkGameOver()</code> function checks if height of two consecutive is uneven and triggers gameOver when visible length of first land has fallen before threshold. we have used two different thresholds. One to check when penguin collides with a land and the other when penguin falls from land of higher height. For eg,</p>

<p><img src="http://coffeecoder.net/images/penguin_walk/game_over.png"></p>

<p>Because two lands are uneven and first land&rsquo;s visible length is almost below threshold, gameover is triggered immediately after. <code>triggerGameOver</code> resets the state of the game, and our game can be restarted.</p>

<h4>The Game Loop</h4>

<p>The <code>showScene()</code> also is our main execution loop. Using <code>requestAnimationFrame()</code> we repetitively request and paint scene on our canvas. We also call <code>checkGameOver()</code> to see if there has been any collision and reset the state of the game, in that case.</p>

<h2>Conclusion</h2>

<p>So that sums up our mini game. It was a fantastic experience seeing it to the finish. There are many game frameworks available that can save you from the trouble of creating abstractions, be sure to check them out. The most important lesson I learned was to stick around and see it to finish.</p>

<p>So if you wish to build a game, build it like a MVP. Take free art, or maybe just circles and polygons, and focus on building game play. Once you have something good, you can start iterating with better art and visual effects but the important thing is to get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackers Are the Real 10x Engineers.]]></title>
    <link href="http://coffeecoder.net/blog/Hackers-are-the-real-10x-engineers/"/>
    <updated>2015-01-19T23:15:05+05:30</updated>
    <id>http://coffeecoder.net/blog/Hackers-are-the-real-10x-engineers</id>
    <content type="html"><![CDATA[<p>The notion of 10x programmer was first mentioned by John Brooks (of, <a href="http://en.wikipedia.org/wiki/Brooks%27s_law">Brook&rsquo;s law</a> fame) in his essay <a href="http://en.wikipedia.org/wiki/No_Silver_Bullet">No Silver Bullet</a>, according to which, &lsquo;there is as much as a tenfold difference between an ordinary designer (programmer) and a great one&rsquo;. The idea has been widely debated, sometimes refuted and many times defended which is unsurprising for it is impossible to accurately measure a programmer&rsquo;s productivity.</p>

<p>Sadly, the idea of 10x coder is usually visualized as a screen glued junkie, moving fingers over keyboard without a break. While the picture may be popular for sci-fi films, it is hardly close to reality.</p>

<!-- more -->


<p>At my previous company we needed a system to integrate a CRUD system for rich text posts in the existing website which means a lot of creating lots of forms and a long laborious coding process; a sucky job in short. We already had a WordPress blog, so I suggested that we could instead use WordPress itself with a plugin to output posts in JSON format and custom tag to identify where the posts are to be shown. It took merely two days to complete the whole task.</p>

<p>I won&rsquo;t claim it was an exceptionally good idea but it saved the company more than a week of time. I am not claiming myself to be the 10x guy but I believe ideas are what defines him.</p>

<h2>Conceiving the idea</h2>

<p>On a cognitive level it is nearly impossible to describe how did a complex interaction of billions of neurons, could result in something like an &lsquo;idea&rsquo;. Let&rsquo;s try a more simpler abstraction.</p>

<ul>
<li>I thought that WordPress already has process to achieve all we want, we just need a way to integrate it into the website.</li>
<li>I realized because WordPress has a plugin for everything, it must have a plugin for JSON API too.</li>
<li>I linked 1 and 2.</li>
</ul>


<p>An abstraction accurately described by, popular sci-fi author, Issac Asimov, in his article, &ldquo;<a href="http://www.technologyreview.com/view/531911/isaac-asimov-asks-how-do-people-get-new-ideas/">How do people get new ideas?</a>&rdquo;, in 1959.</p>

<h2>The Good Programmers</h2>

<p><img class="center" src="http://coffeecoder.net/images/efficiency.png"></p>

<p>&ldquo;Good programmers dig Haskell on the weekend, know dozens of languages and are fan of trying hands on every new technology&rdquo;. At least that seems to be the well-conceived notion of a good programmer &ndash;  heavy insistence digging horizontally. I don&rsquo;t discourage such enthusiasm and neither I claim it to be counter-productive but I believe it gives a false impressions about your progress (that you are very good). Obviously, you are only finding multiple ways to reach the same goal.</p>

<h2>The 10x Programmers</h2>

<p>So who are these 10x developers? I believe they are the ones who have better ideas when finding solutions and how do they get these ideas? for me, by doing different things, reading what other people wrote, digging deep into stuff, and most importantly having an urge to constantly challenging one&rsquo;s current skill-set.</p>

<p>Good ideas come by bashing different things and molding them in unordinary ways. Finding such ways, requires much more than just knowing latest fad, it requires lots of &lsquo;hacking&rsquo;. As Edward Weismann observes in his free ebook, <a href="http://static.v25media.com/edw519_mod.html">The Best of edw519</a>, &ldquo;<u>the more I meet &lsquo;famous&rsquo; hackers and the more I meet people from this community (online and offline), the more I realize that there&rsquo;s not really all that much that separates us</u>.&rdquo;, brilliance spurs out of challenging endeavors.</p>

<p>The 10x engineers aren&rsquo;t inherently born but are the ones who enjoy the &lsquo;hacking&rsquo; the most. Understand the bitcoin protocol or Javascript prototyping, or automating a laborious process excites them and more they hack, more they do different stuff, more seeds are sown for the new and better ideas.</p>

<p>But why are they so rare? The simple reason is not many people are interested in doing things beyond their scope. Lots of people want to make games, but how many actually start making one? and more importantly, how many actually finish it? Quite less, I believe. I am not implying lack of brilliance but inapt determination may hinder one&rsquo;s path towards moving up the ladder, as it is with case for most of the people.</p>

<p>So if you love tinkering around things, and have a discipline to always go beyond what you already know, I believe you are a 10x developer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Perfect Reason to Avoid PHP: Type Juggling]]></title>
    <link href="http://coffeecoder.net/blog/my-perfect-reason-avoid-php-type-juggling/"/>
    <updated>2014-11-12T18:46:34+05:30</updated>
    <id>http://coffeecoder.net/blog/my-perfect-reason-avoid-php-type-juggling</id>
    <content type="html"><![CDATA[<p>If there was an award for the most hated language, the unanimous winner would be PHP. Lots of write-ups criticize it for its nonsensical function naming conventions, inconsistent parameters, sheer absence of what we call, &ldquo;a well thought design&rdquo;. However, people on the other side, suggest that writing good code is upto the programmer showcasing &ldquo;Zend Framework&rdquo;, they assert, PHP is a very reasonable language to write clean code. They say its easy to ignore the inconsistencies with a good editor or IDE and adopting good practices. True they are, I believed, until, I encountered something which is completely inexcusable, an ugly case of type juggling.</p>

<h2>Type Juggling</h2>

<p>Type Juggling (or, automatic type casting) is a PHP mechanism which transforms one type to another depending upon the context. As <a href="http://php.net/manual/en/language.types.type-juggling.php">the manual</a> explains, if you add a string to a number, the string will be type casted to a number and not the other way round which results in something like this.</p>

<p><code>20 + "10Hello World" = 30</code></p>

<!-- more -->


<p>Although, I can guess this behavior was added, because string concatenation was already being done with (dot) operator but an ill conceived functionality, as such, can serve a major blow to programmers in trying to figure out why something doesn&rsquo;t work. Take an example of <code>in_array</code> and type juggling. Suppose, you are checking presence of a string in mixed array. To your surprise, you would find that the following spills out true, because when comparing &ldquo;Hello&rdquo; with 0, the former is casted to integer zero.</p>

<figure class='code'><figcaption><span>Type Juggling and in_array </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$arr</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;was&quot;</span><span class="p">,</span> <span class="s2">&quot;invented&quot;</span><span class="p">,</span> <span class="s2">&quot;in&quot;</span><span class="p">,</span> <span class="s2">&quot;india&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span> <span class="nb">in_array</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="nv">$arr</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although, yes, PHP allows you to do the strict checking, if you invoke the third parameter of <code>in_array</code> but point remains: why should this happen when it is not supposed to?</p>

<p>Let me tell you an incident, how this behavior hit me badly.</p>

<h2>bindParam() and Type Juggling</h2>

<p>Suppose, you have a big MySQL prepared query for a &ldquo;school&rdquo; table which also stores 10th grade scores in column, &ldquo;10th_grade&rdquo;. So the query goes like this,</p>

<figure class='code'><figcaption><span>Type Juggling and bind_param() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$sql</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s2">&quot;INSERT INTO school_scores(......10th_grade.....) VALUES(....&quot;</span><span class="o">:</span><span class="mi">10</span><span class="nx">th_grade</span><span class="s2">&quot;....);</span>
</span><span class='line'><span class="si">$sql-&gt;bindParam</span><span class="s2">(&quot;</span><span class="mi">10</span><span class="nx">th_grade</span><span class="s2">&quot;, isset(</span><span class="si">$data[&quot;10th_grade&quot;]</span><span class="s2">) ? </span><span class="si">$data[&quot;10th_grade&quot;]</span><span class="s2"> : NULL);</span>
</span><span class='line'><span class="si">$sql-&gt;execute</span><span class="s2">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks fine? but you get an error: &ldquo;number of bound variables does not match number of tokens&rdquo;. You recheck everything, the parameter count on both sides are correct, data is correct but still it is the same. So where is the culprit?</p>

<p>The culprit here is PHP which juggles the type of &ldquo;10th_grade&rdquo; to 10 and inserts the assigns value to parameter #10, as bindParam&rsquo;s first parameter accepts two types of arguments. Finding the flaw here was quite hard because a) you don&rsquo;t know what you are looking for b) PDO <a href="http://php.net/manual/en/pdostatement.debugdumpparams.php">debugDumpParams</a> doesn&rsquo;t even print what values were passed making debugging almost impossible.</p>

<h2>Conclusion</h2>

<p>Although, it can still be said, how such things might still be avoided if you know them but what can&rsquo;t be answered is &ndash; why? Why should one not avoid PHP choose other superior languages over it. The argument of being easy to use and deploy remained true when other stacks lacked simplicity and ease but not today, when web offers far more choices of frameworks and tools. I won&rsquo;t say I would completely refrain from using PHP but I would definitely avoid it in fear of encountering another of its nastiness.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Should You Use Tmux?]]></title>
    <link href="http://coffeecoder.net/blog/why-should-you-use-tmux/"/>
    <updated>2014-08-26T22:52:58+05:30</updated>
    <id>http://coffeecoder.net/blog/why-should-you-use-tmux</id>
    <content type="html"><![CDATA[<p>Terminals are an essential place frequented by developers in their daily use. In contrast to GUIs, command line gives you more folds of power and transparency when you dealing with a complicated tool like git, or when you need to pull off some networking stats using <code>netstat</code>. In this blog post, I&rsquo;ll explain why tmux is a great productivity enhancer when working with command line.</p>

<h2>What is tmux?</h2>

<p><strong>tmux</strong> or terminal multiplexer is a simpler version of GNU screen, both of which are tools to split, combine and create terminal windows. Yes, that is indeed similar to what <strong>terminator</strong> does but guess what, you can&rsquo;t run terminator on SSH, can you? but that is not the selling point here. tmux is command line based tool which is very easy to use and in fact for any beginner, a <a href="http://danielmiessler.com/study/tmux/">little primer</a> should be enough to start using it to its full extent.</p>

<!-- more -->


<h2>Why should one use tmux?</h2>

<p>I use tmux even when I am working locally. In comparison to terminator, tmux offers a significant advantage by freeing your hands from needing to get to the mouse. When working over command line, anything other than keyboard is an interruption and costs in your work flow. Just like tabbed browsing, multiples panes and windows allow you to do many things at once and with tmux you are encouraged to exploit them more effectively. Other significant features include :</p>

<ul>
<li>You can use it over SSH.</li>
<li>You can share a session on SSH with use of sockets.</li>
<li>You can de-attach and run multiple sessions.</li>
<li>Using tmux-sessions you can dump and restore sessions after boot.</li>
</ul>


<p>In a better combination of both tabbed terminals and tmux, one can use separate tabs for both local and remote machines and tmux can be used inside each tab, helping to avoid confusion between the two.</p>

<h2>A typical use-case scenario</h2>

<p>A typical usefulness of tmux can be illustrated when you are debugging and internal server error over SSH. My normal mode of operation in such cases was to keep switching directories using <code>cd -</code> alternating between adjusting configurations and viewing error logs. Using tmux this process was a lot simpler since all you needed was to switch tabs. Even better, you could use <code>watch</code> command in a separate pan to constantly output the <code>tail error_log</code> to console, thus, saving your time and watching constantly switching directories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Git for Introducing Temporary Changes]]></title>
    <link href="http://coffeecoder.net/blog/using-git-format-patch-to-introduce-temporary-changes/"/>
    <updated>2014-08-18T21:26:32+05:30</updated>
    <id>http://coffeecoder.net/blog/using-git-format-patch-to-introduce-temporary-changes</id>
    <content type="html"><![CDATA[<p>Lately, on independence day we needed to introduce a small logo change on our website to acknowledge it. The change wasn&rsquo;t meant to last for more than a few days and hence, the problem of introducing a temporary change which shouldn&rsquo;t be a part of the history arose. Out of ignorance, we went through the path of making a commit and later reverting it with <code>git-revert</code>. Recently I found about excellent patching system of git which makes an impressive solution for the problem.</p>

<h2>Patching </h2>

<p>Patching used in git isn&rsquo;t unique. It derives itself from an old <code>patch</code> program written by Larry Wall in 1985. <code>patch</code> program is pretty simple. It takes a diff file as its input and applies those changes to corresponding files. Because of this simplicity, it makes patch files very easy to send. Perhaps, before the advent of github, they were the old man&rsquo;s pull request. Another great thing about patches is that they can painlessly be reversed.</p>

<p>Git&rsquo;s <code>format-patch</code> is an extension of <code>patch</code> and offers two advantages over it. First, it generates an email formatted patch file which is much easier to be sent via <code>mailutils</code>. Secondly, it supports binary diffs which means if you have a binary file which was created in the patch, git&rsquo;s patch file will have record of it and it will be created when patch is applied. The best thing about git&rsquo;s patching system is that it can be applied even if the folder is not a git repository, making it suitable for use over production servers.</p>

<!-- more -->


<h2>Temporary changes using format-patch</h2>

<p>Depending upon your requirements, you can have multiple patch files for each commit, or a single one for multiple commits. For creating a temporary change, first create a new branch, say <code>abc</code> and commit your local changes to it. After you have finished, you can use <code>git format-patch S-COMMIT --stdout &gt; shiny.patch</code> to create a single patch for multiple commits <strong>after</strong> <code>S-COMMIT</code>. After saving the patch, you can delete the branch.</p>

<p>The saved patch can now be applied directly on production server with <code>git apply shiny.patch</code>. To reverse this patch, you can use <code>git apply -R shin.patch</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Whistle Detector Using WebAudio API]]></title>
    <link href="http://coffeecoder.net/blog/building-a-whistle-detector/"/>
    <updated>2014-07-01T22:33:56+05:30</updated>
    <id>http://coffeecoder.net/blog/building-a-whistle-detector</id>
    <content type="html"><![CDATA[<p>There are lots of things to get excited about HTML5 and the one which caught my curiosity was HTML5 Audio / Video API. I was overwhelmed with ideas of practical applications like face detect login or inline dictation but I chose to start with something small &ndash; a whistle detector. Although, not wholly accurate it works quite well with very a good accuracy. I used M. Nilsson&rsquo;s research paper, &ldquo;<a href="http://medieteknik.bth.se/fou/forskinfo.nsf/all/67a079f0676c546fc12574a4002d6d38/$file/nilsson-whistle.pdf">Human Whistle Detection and Frequency Estimation</a>&rdquo; to implement this. It took me a while to get understand exactly what the paper narrates with its mathematical notations but luckily my wandered at the right place to get the right idea.</p>

<p>For the first part, I would try to explain <a href="http://btu.se/fou/forskinfo.nsf/17e96a0dab8ab6a1c1257457004d59ab/2660bccb72bce3ccc125714d004828c1/$file/successive%20mean...pdf">Successive Mean Quantization Transform (SMQT)</a> which prepares the audio data for further processing.</p>

<h2>Successive Mean Quantization Transform</h2>

<p>Transformation in mathematics is an operation to map one set to another set. SMQT is a similar method to do the same to remove bias or gain resulting from disparity between various kinds of sensors (microphones) and other factors. In SMQT, we recursively take mean of data set and split it into two halves and do the same on each half. Data values above the mean are assigned, &ldquo;1&rdquo; and below are assigned &ldquo;0&rdquo;. The recursion is carried out to a pre-defined depth, at the end of which we have a binary tree with 1s and 0s. Sounds confusing? Lets take and example of set:</p>

<p><code>X = [89, 78, 63, 202, 90, 45, 112, 79, 95, 87, 90, 78, 54, 34, 66, 32]</code>.</p>

<p><code>Mean(X) = 80.875</code></p>

<p>The values above mean are assigned &ldquo;1&rdquo; while below are assigned &ldquo;0&rdquo;. So it becomes &ndash; <code>[1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 0]</code>. Let this procedure be called as <code>U(X)</code>. Data values corresponding to &ldquo;0&rdquo; propagate left of the binary tree while &ldquo;1&rdquo; propagate right. So we have a tree which looks like,</p>

<p><img src="http://coffeecoder.net/images/whistle/tree.jpg"></p>

<p>Continue this process recursively till you reach a depth of L. ( <strong>Note</strong>: L = 8 in our application. )</p>

<p>After this, you weight each level by multiplying the bits by 2<sup>cur_level &ndash; 1</sup> and add it up to the top of tree. So, if you have a tree which looks like,</p>

<p><img src="http://coffeecoder.net/images/whistle/tree2.jpg"></p>

<p>Multiply D, E, F, G by 2<sup>2</sup> which gives <code>[4 0 4 0]</code>, <code>[0 0 4 0]</code>, <code>[0 0 4 4]</code>, <code>[4 0 0 0]</code> and so on. Lets call this procedure of weighing individual arrays as <code>W(X)</code>. After we are done weighing, we add to the node its subtrees. For eg, <code>B = W(B) + (W(D) . W(E))</code>. So we have now have audio data that is bias and gain free. (<a href="https://gist.github.com/shubhamjain/88f14b328e7b145c79e5#file-smqt-js">Gist</a>).</p>

<!-- more -->


<h2>Normalization and FFT</h2>

<p>For the purpose of this detector we will use chunks of 512 elements for which we will calculate SMQT to a max depth of 8. After we have taken SMQT of audio data, we would normalize this result so that its values fall within range of <code>[1, -1]</code>. we will divide the values by 2<sup>L &ndash; 1</sup> and subtract &ldquo;1&rdquo; from the result.</p>

<p>Taking the Fast Fourier Transform of the normalized data will give us an array of <code>N = 256</code> elements. Let this FFT be denoted by <code>F(T)</code>.of frequency. Point to be noted here is, because we are using 256 elements to represent a range 0 &ndash; 22Khz, each element will represent about ~43 Hz of frequency. To detect a whistle, we will need to extract two feature vectors.</p>

<h2>Calculation of feature vectors</h2>

<p>Human whistle generally falls in the range of 500 &ndash; 5000Hz. Want to try? Take a look at <a href="http://arachnoid.com/FFTExplorer/">FFTExplorer</a>. Our estimation of whistle will involve calculation of two feature vector (or, values in simple terms). In the first step, we will find result of band-pass and band-stop filter applied on <code>F(T)</code> in the frequency range (500 &ndash; 5000Hz), called <strong>p</strong><sub>bp</sub>(t) and <strong>p</strong><sub>bs</sub>(t). Although, the way I have implemented filters is pretty basic (and wrong). I have attenuated amplitudes to a fixed value but filters are generally much more complex than that.</p>

<p>The two feature vectors aim at finding out the spikes in our frequency range, strongly suggesting presence of a whistle. The two feature vectors result from following requirements:</p>

<ul>
<li><p>The largest value in <strong>p</strong><sub>bp</sub>(t) should typically be larger than the mean of <strong>p</strong><sub>bs</sub>(t) in the presence of whistle</p></li>
<li><p>In presence of whistle <strong>p</strong><sub>bp</sub>(t) has typically a few very dominant values.</p></li>
</ul>


<h4>First feature vector</h4>

<p>For the first feature vector we will use the following equation,</p>

<p><img src="http://coffeecoder.net/images/whistle/equation.png"></p>

<p>The value must be greater than <strong>25</strong>.</p>

<h4>Second feature vector</h4>

<p>The second one is bit tricky. First we will take find a new array by.</p>

<p><img src="http://coffeecoder.net/images/whistle/equation2.png"></p>

<p>Next, we calculate two vectors, given by</p>

<p><img src="http://coffeecoder.net/images/whistle/equation5.png"></p>

<p><img src="http://coffeecoder.net/images/whistle/equation6.png"></p>

<p>The theory behind this is to detect peaks by comparing both the vectors. For measuring the similarity, we will exploit Jensen Difference, given by,</p>

<p><img src="http://coffeecoder.net/images/whistle/equation3.png"></p>

<p><img src="http://coffeecoder.net/images/whistle/equation4.png"></p>

<p>The value of <code>J(v, v')</code> must be around <strong>.44</strong>.</p>

<p><strong>Note</strong>: The threshold values are only meant for general terms. If you find suitable you can use other values to suit your needs.</p>

<h2>Threshold positives and accuracy</h2>

<p>The problem of false positives will still persist for various kind of noises and sounds. To be more precise, we can can calculate no of positive samples within X no. of samples and compare it with our threshold. If it exceeds threshold positives, then it probably is a whistle. For our project, the chosen threshold is <strong>5</strong> which can be increased for further accuracy.</p>

<p>The whistle detector is quite accurate even under influence of acceptable noise but the accuracy will decrease with lowering of threshold. However,increasing to much higher value may fail to detect to even a long whistle. So it must be around to be accurate enough for a practical application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Desktop Apps Still Make Sense]]></title>
    <link href="http://coffeecoder.net/blog/why-desktop-apps-still-make-sense/"/>
    <updated>2014-05-22T16:20:49+05:30</updated>
    <id>http://coffeecoder.net/blog/why-desktop-apps-still-make-sense</id>
    <content type="html"><![CDATA[<p>So you think desktop apps will die a slow death? The sentiment of demise of desktop apps has been professed by many people, <a href="http://blog.codinghorror.com/all-programming-is-web-programming">Jeff Atwood</a>, <a href="http://www.kalzumeus.com/2009/09/05/desktop-aps-versus-web-apps/">Patrick McKenzie</a> to name a few. With colossal jump in our web technologies, both performance and capability wise, something that couldn&rsquo;t have been possible few years back, the idea is getting even more traction. When you see demos like <a href="http://media.tojicode.com/q3bsp/">this</a>, you are tempted to think if web browsers would be able to address the performance issue, what would withhold for web to be used for everything from games to essential business software?</p>

<p>So why do I think desktop apps still make sense?</p>

<ul>
<li><strong>Passiveness of income</strong>: While it may be true, web apps fare great when it comes to potential revenue, cross-platform comparability, and reach, it is indispensable to avoid working actively on it. Have you ever heard of someone who was pulling off revenue his age old SaSS app without putting in any work? On the other side, I still get sales from one of my stupid script that I made a long time ago and never even marketed. May be a generalized scenario; it might be possible someone earns a passive income from his web app without adding anything but it is hard to think that the developer can avoid tasks like marketing, server monitoring, dealing with quirky consumer issues, or scaling.</li>
</ul>


<!-- more -->


<ul>
<li><p><strong>Less overhead in selling</strong>: Selling a web app means, integrating it with an API to accept payments, offer a X days trial, send emails reminding trial period is ending and charge card on recurring basis. By any chance, if you happened to use paypal and their API be prepared to pull your hair off in doing this. In contrast, selling desktop apps is much easier with many services available for selling downloads &ndash; gumroad, softpedia, CNET.</p></li>
<li><p><strong>Lesser obligations to deal with issues</strong>: With a web app, you are expected immediately to address any issue that pops up and with many peculiarities of CSS and HTML, it is reasonable to expect that in &ldquo;some browser&rdquo; on &ldquo;some device&rdquo;, the text is overflowing outside the container. If you are dealing with a desktop app, you have plenty of time till the next release is due (except for security issues, of course).</p></li>
</ul>


<p>So it boils down to how desktop apps are about writing code and shipping where as web apps require you to be there always. Although, you probably won&rsquo;t lose customer over some little CSS issue but the way your mind works, you won&rsquo;t be able to stop yourself from addressing it immediately and that is where desktop apps have an upper hand &ndash; you can prioritize which things to add / fix / remove in the next release. One example of this has been documented by Joel Spolsky.</p>

<blockquote><p>As Excel 5 was nearing completion, I started working on the Excel 6 spec with a colleague, Eric Michelman. We sat down to go through the list of &ldquo;Excel 6&rdquo; features that had been cut from the Excel 5 schedule. We were absolutely shocked to see that the list of cut features was the shoddiest list of features you could imagine. Not one of those features was worth doing. I don&rsquo;t think a single one of them was ever done, even in the next three releases. The process of culling features to fit a schedule was the best thing we could have done. If we hadn&rsquo;t done this, Excel 5 would have taken twice as long and included 50% useless crap features
&mdash; <a href="http://www.joelonsoftware.com/articles/fog0000000245.html">Painless Software Schedules</a></p></blockquote>

<p>Whether or not desktop apps will cease, web apps certainly aren&rsquo;t a de-facto choice when it comes to making a product.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Using Captchas That Can Be Broken With Two Lines of Code]]></title>
    <link href="http://coffeecoder.net/blog/stop-using-captchas-that-can-be-broken-with-two-lines-of-code/"/>
    <updated>2014-05-04T18:46:34+05:30</updated>
    <id>http://coffeecoder.net/blog/stop-using-captchas-that-can-be-broken-with-two-lines-of-code</id>
    <content type="html"><![CDATA[<p>The de-facto bot prevention technique sprawls everywhere on the web but I am surprised how people overestimate the difficulty of breaking a captcha. Here are some of them which I encountered.</p>

<p><img src="http://coffeecoder.net/images/captchas/1.jpg"> <img src="http://coffeecoder.net/images/captchas/2.jpg"> <img src="http://coffeecoder.net/images/captchas/3.jpg"></p>

<p>It won’t take rocket science to convert them to text. In fact, the only two free tools needed for this purpose are: <a href="http://code.google.com/tesseract-ocr%E2%80%8E">tesseract</a> and <a href="http://www.imagemagick.org/">Imagemagick</a>.</p>

<figure class='code'><figcaption><span>Convert command </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>convert captcha.jpg -threshold 5% a.jpg
</span></code></pre></td></tr></table></div></figure>


<p>Adjust the threshold value to get a binary image with no noise.</p>

<figure class='code'><figcaption><span>Tesseract </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tesseract -l eng a.jpg text
</span></code></pre></td></tr></table></div></figure>


<p>This will create a “text.txt” file with the captcha text in it.</p>

<p>I ran a test on effectiveness of these commands and the success rate was nearly 9 / 10, clearly implying how weak or better say, made-from-scratch captcha implementations are as good as having none at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Earphone Presses Useful With PyAudio and VLC HTTP API]]></title>
    <link href="http://coffeecoder.net/blog/making-earphone-presses-useful-with-pyaudio-and-vlc-http-api/"/>
    <updated>2014-03-30T18:23:33+05:30</updated>
    <id>http://coffeecoder.net/blog/making-earphone-presses-useful-with-pyaudio-and-vlc-http-api</id>
    <content type="html"><![CDATA[<p><strong>Note</strong>: I am not an audio expert or even close to one. This post may pose amateur attempts to do something very trivial. Link to the Github repository.</p>

<p>Ever had one of those moments, when you are super excited about accomplishing a challenge, having put something useful on the table, only to realize it is not even close to the greatness you imagined; to be bitter, futile? This weekend I build something to detect earphone button presses and control VLC media player with it but it was not so useful afterall.</p>

<h2>Earphone Presses</h2>

<p><img src="http://coffeecoder.net/images/earphone/earphone.jpg" width="128" height="128" title="&#34;Samsung Earphones&#34;" alt="&#34;Samsung Earphones&#34;"></p>

<p>(<a href="http://images.esellerpro.com/2477/I/488/907/lrgscaleEHS60-WHITE-0.jpg">Link to original image</a>)</p>

<p>I own a pair of Samsung earphones, intrigued how the buttons used to switch / pause tracks in smartphones work, I plugged in the pieces in my combo jack, used audacity, pressed a button and the result was:</p>

<p><img src="http://coffeecoder.net/images/earphone/wave.png" title="Wave form for button press" alt="Wave form for button press" /></p>

<p>&ldquo;Great! Awesome find!&rdquo; exclaimed my mind. So how can we make this into something useful?</p>

<!-- more -->


<h2>Detecting earphone presses</h2>

<p>Intuitively, the signal has a very high amplitude, so much so that, the <a href="http://en.wikipedia.org/wiki/Clipping_(audio">signal gets clipped</a>). Quite clearly, to detect the earphone press, implies detecting clipping for a certain length of time. Here is how I did it.</p>

<figure class='code'><figcaption><span>Sampling </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">stream</span> <span class="o">=</span> <span class="n">pyaudio</span><span class="o">.</span><span class="n">PyAudio</span><span class="p">()</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">format</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">FORMAT</span><span class="p">,</span> <span class="n">channels</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">rate</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">RATE</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">frames_per_buffer</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c">#read one sample</span>
</span><span class='line'>    <span class="n">int_sample</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="c">#convert string to 32 bit integer </span>
</span></code></pre></td></tr></table></div></figure>


<p>First I used PyAudio library to process one sample at each instance. Since the sample is in ASCII format, I needed it to convert to integer for which “struct” module comes in handy.</p>

<figure class='code'><figcaption><span>Detecting Clipping </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">count_min</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">button_down</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Count no of clipped samples. The first condition </span>
</span><span class='line'><span class="c"># makes sure double events don&#39;t fire after a long press.</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="ow">not</span><span class="p">(</span><span class="n">button_down</span><span class="p">)</span> <span class="ow">and</span> <span class="n">int_sample</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">THRESHOLD_MIN</span> <span class="p">):</span>
</span><span class='line'>    <span class="n">count_min</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">count_min</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">THRESHOLD_SAMPLES</span><span class="p">:</span>
</span><span class='line'>        <span class="n">count_min</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">button_down</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">print_e</span> <span class="p">:</span> <span class="k">print</span> <span class="s">&quot;button_down&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">count_min</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how do we detect clipping? By finding a streak of clipped samples. In this code, I try to find a continuous sequence of samples below a “minimum threshold”. If the count of these samples exceed some value (about 800 samples at 22kHz sampling rate), we know the signal was clipped. Same can be applied for analyzing a streak of samples above “maximum threshold”.</p>

<p>Hence, using the above we have detecting “button down” and “button up” events. The long hold event can also be detected with analyzing the time after “button down” event. If it exceeds, lets say, 1.5s and “button up” event is not fired, then it probably implies “button hold” event.</p>

<h2>VLC HTTP Interface</h2>

<p>Did you guys know, VLC can be controlled by <a href="https://wiki.videolan.org/Interfaces">variety of interfaces</a> including a HTTP one? Its one of those softwares, which are much more impressive than propriety counterparts. I build a <a href="https://gist.github.com/shubhamjain/9809108">small library</a> to communicate to VLC via the HTTP interface.</p>

<p>In the end, I combined all of the above, to make earphone press pause / play the media and holding the button seeking 5sec further.</p>

<h2>But pretty useless</h2>

<p>While making this, I didn’t realize that my laptop has a combo jack which makes it possible to do recording and playing with the same device just like smartphones. So computers without this feature are out of luck to use this which means almost all.</p>

<p>On the whole, it was a nice weekend hack which got me started with basics of audio and how it works. I will try to take it further next time; build a whistle detector, maybe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading MP3 ID3 Tags in Native PHP]]></title>
    <link href="http://coffeecoder.net/blog/reading-mp3-id3-tags-in-native-php/"/>
    <updated>2013-07-16T17:41:05+05:30</updated>
    <id>http://coffeecoder.net/blog/reading-mp3-id3-tags-in-native-php</id>
    <content type="html"><![CDATA[<p>This week I went crazy about file formats. I tried to understand specifications of many popular formats like MP3, FLV, PDF. Its amazing to see that no matter how complex these technologies are or the algorithms they use to store media efficiently, at the lower level it is just a clever arrangement of bits that makes sense and with a bit of experimentation and hacking around MP3 format (a Hex Editor is a invaluable tool in this), I was able to read them in PHP without using any extension. The source has been put on <a href="https://github.com/shubhamjain/PHP-ID3">GitHub</a>.</p>

<h2>Binary File Reader</h2>

<p>The native method for reading a binary file  is unpack(). The problem with it was that it can’t handle variable length chunks, and I found it tough to understand the format of packing codes. Unluckily, I realized it quite late (damn!), that I can create the reader more efficiently by using unpack() function. (<a href="https://gist.github.com/shubhamjain/5964350">Gist</a>)</p>

<!-- more -->


<h2>A background On ID3 Tags</h2>

<p>Like I said, tags are nothing but just an arrangement of bytes which makes sense. As the official spec describes, the first three bytes, are fixed, which are “ID3”. Next two bytes declare version, one byte for flags and next four bytes for total length of the tags that follow. I found, no much use to the first 10 bytes, especially the flag byte is completely obscure of what its purpose is.</p>

<p>Next what follows is a series of frames with header and body which declare the actual content. The header has four characters for its Frame ID, followed by four bytes for size of body, two bytes for flag and next follows the body of tag. It is more clear from the picture below.</p>

<p><img src="http://coffeecoder.net/images/id3_hex.jpg" title="Hex Edit for MP3 File" alt="Hex Edit for MP3 File" /></p>

<p>For <code>TCON</code> tag, <code>00 00 00 0C</code> is the size of tag body ( 12 bytes ), <code>48 65</code> represent  flag bits which is described in spec and the next 12 bytes ( “Heavy Metal” ) form the body of tag. Many of such frames make up the information about the MP3 file. Some frames have further formatting in their “body” like APIC which represents the Album art.</p>

<h2>Constructing an ID3 Reader</h2>

<p>Once you understand the spec, creating a reader is very simple.The first step should be to read the header bytes.</p>

<figure class='code'><figcaption><span>Initializing Filereader </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_FileReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BinaryFileReader</span><span class="p">(</span><span class="nv">$FileHandle</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;ID3&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">FIXED</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;Version&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">FIXED</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;Flag&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">FIXED</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;SizeTag&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">FIXED</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">INT</span><span class="p">),</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>The constructor in <code>ID3Tags_Reader.php</code>, initializes a <code>BinaryFileReader</code> object with a map of first 10 bytes. As explained, ID3 is fixed 3-byte string followed by version, flag and total size of tag body (which is casted to an integer). Once header is read we can start reading tags.</p>

<p>The <code>ReadAllTags()</code> method defines a similar map for reading frames,</p>

<figure class='code'><figcaption><span>Setting map using SetMap method </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_FileReader</span><span class="o">-&gt;</span><span class="na">SetMap</span><span class="p">(</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;FrameID&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">FIXED</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;Size&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">FIXED</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">INT</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;Flag&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">FIXED</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;Body&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">SIZE_OF</span><span class="p">,</span> <span class="s2">&quot;Size&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Body&rdquo; uses an option to define a variable length string which depends upon  &ldquo;Size&rdquo; (Keep in mind to type cast &ldquo;Size&rdquo; to integer). A  while loop follows to read all tags defined in <code>$ID3Tags</code> array.</p>

<h2>Reading Album Art</h2>

<p>The Album art or Attachment Picture, in official sense, refers to a picture of albums, songs we see in our music players. The body of APIC has a special formatting described in the spec. The problem in reading was how to create a File handle from string for <code>BinaryFileReader</code>. While the thing could have easily been achieved  by <code>unpack()</code>, I would not let my work get un-noticed :).</p>

<p>PHP provides a method by which we can create artificial streams without using files. They are so flexible that you can create them out of strings, http resource, standard input etc. To create a stream here, we can simply use “data://” like,</p>

<figure class='code'><figcaption><span>Creating artificial stream </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">//Create an artificial stream from Image data</span>
</span><span class='line'><span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;data://text/plain;base64,&#39;</span><span class="o">.</span><span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_ID3Array</span><span class="p">[</span><span class="s2">&quot;APIC&quot;</span><span class="p">][</span><span class="s2">&quot;Body&quot;</span><span class="p">]),</span> <span class="s1">&#39;rb&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To read the image data, the map we can use is,</p>

<figure class='code'><figcaption><span>Reading image data </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$fileReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BinaryFileReader</span><span class="p">(</span> <span class="nv">$fp</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;TextEncoding&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">FIXED</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="s2">&quot;MimeType&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">NULL_TERMINATED</span><span class="p">),</span>
</span><span class='line'>  <span class="s2">&quot;FileName&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">NULL_TERMINATED</span><span class="p">),</span>
</span><span class='line'>  <span class="s2">&quot;ContentDesc&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">NULL_TERMINATED</span><span class="p">),</span>
</span><span class='line'>  <span class="s2">&quot;BinaryData&quot;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="nx">BinaryFileReader</span><span class="o">::</span><span class="na">EOF_TERMINATED</span><span class="p">))</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>MimeType, Content Description and FileName have no specific size but are just null-terminated strings and BinaryData which contains the main image content is rest of the remaining file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why You Should Never Freelance on Freelancing Sites.]]></title>
    <link href="http://coffeecoder.net/blog/why-you-should-never-freelance/"/>
    <updated>2013-07-05T11:52:47+05:30</updated>
    <id>http://coffeecoder.net/blog/why-you-should-never-freelance</id>
    <content type="html"><![CDATA[<p>Back in the days, I used to be the crazy money minded programmer writing kLOCs of crap with no code quality concern, for projects I often found on freelancing sites. Freelancer.com, oDesk and likes which seem to be quite popular among employers looking for cheap third world country coders but honestly, if you think about being a better programmer, never log in to them. Why?</p>

<!-- more -->


<ul>
<li><p><strong>Cheesy employers</strong>: such people have pretty bad idea about what programming is. They want to get best work done and pay like pennies and the sad part is people are always ready to have the lowest bid on it, albeit, it is funny sometimes. I remember a web scraping project I had in which the employer was constantly pestering to add more and more features which was annoying to do at the price I was paid.</p></li>
<li><p><strong>No concern about code quality</strong>: I believe that if you are into something where code quality is given lowest priority, you should not do it. For most of the projects, I am quite sure the posters would have no idea what code quality is about.</p></li>
<li><p><strong>No scope for challenges</strong>: My experience suggests that nine out of ten projects out there offer no challenge at all. Maybe it is just a simple bug fix, a simple crud app, a task automation. Many times it is, “I want a website similar to x website but I would be adding y feature and it will become the next Facebook”. Granted there may be exception but with noise so high, you would have hard time finding the signal.</p></li>
<li><p><strong>No incentive in doing things better</strong>: Most of the time, here employers won’t get excited about you having set up a automatic build script or integrated version control or started unit testing code. Most likely, they would start bricking about building features first. There is no reason for you to be better.</p></li>
</ul>


<blockquote><p>There is no point in making software unless you want to make it better.</p>

<p>&mdash; <em>The Pragmatic Programmer</em></p></blockquote>

<p>Freelancing on these sites will just make you a terrible programmer with no exposure to good software development practices. Programming is a craft, which needs improvement for lifetime to excel it.</p>

<p>My advice will be to start your personal website/blog, start contributing to open source project and have some pet projects of your own. Join and contribute to sites like StackOverflow, Hacker news, Slashdot. Doing this will not only make you a better programmer but also you will get many exciting offers coming to your inbox Good luck!</p>
]]></content>
  </entry>
  
</feed>
